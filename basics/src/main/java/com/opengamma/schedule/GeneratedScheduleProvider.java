/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.schedule;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.collect.ArgChecker;

/**
 * Provides a schedule generated from schedule definitions.
 * <p>
 * The schedule periods are defined by an {@link UnadjustedScheduleDefinition} and the schedules of individual
 * fields are defined by instances of {@link ScheduleGenerator}.
 * TODO generators or AdjustedScheduleDefinitions for the field schedules?
 */
@BeanDefinition
public class GeneratedScheduleProvider implements ScheduleProvider, ImmutableBean {

  @PropertyDefinition(validate = "notNull")
  private final UnadjustedScheduleDefinition unadjustedSchedule;

  @PropertyDefinition(validate = "notNull")
  private final List<ScheduleGenerator> generators;

  @PropertyDefinition(validate = "notNull")
  private final FieldMap fieldMap;

  // TODO should this include a Map<FieldKey, Object> of default data from the trade? pass it to the generated periods
  @ImmutableConstructor
  public GeneratedScheduleProvider(UnadjustedScheduleDefinition unadjustedSchedule,
                                   List<ScheduleGenerator> generators,
                                   FieldMap fieldMap) {
    this.fieldMap = ArgChecker.notNull(fieldMap, "fieldMap");
    this.unadjustedSchedule = ArgChecker.notNull(unadjustedSchedule, "unadjustedSchedule");
    this.generators = ArgChecker.notNull(generators, "generators");
  }

  @Override
  public Schedule getSchedule() {
    Schedule empty = new Schedule(unadjustedSchedule.getStartDate(), unadjustedSchedule.calculatePeriods(fieldMap));
    // this smells a bit, the combiner function always returns null because it's never used.
    // this works because stream is sequential
    return generators.stream().reduce(empty, (schedule, generator) -> generator.generate(schedule), (sch1, sch2) -> null);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code GeneratedScheduleProvider}.
   * @return the meta-bean, not null
   */
  public static GeneratedScheduleProvider.Meta meta() {
    return GeneratedScheduleProvider.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(GeneratedScheduleProvider.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static GeneratedScheduleProvider.Builder builder() {
    return new GeneratedScheduleProvider.Builder();
  }

  @Override
  public GeneratedScheduleProvider.Meta metaBean() {
    return GeneratedScheduleProvider.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the unadjustedSchedule.
   * @return the value of the property, not null
   */
  public UnadjustedScheduleDefinition getUnadjustedSchedule() {
    return unadjustedSchedule;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the generators.
   * @return the value of the property, not null
   */
  public List<ScheduleGenerator> getGenerators() {
    return generators;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the fieldMap.
   * @return the value of the property, not null
   */
  public FieldMap getFieldMap() {
    return fieldMap;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      GeneratedScheduleProvider other = (GeneratedScheduleProvider) obj;
      return JodaBeanUtils.equal(getUnadjustedSchedule(), other.getUnadjustedSchedule()) &&
          JodaBeanUtils.equal(getGenerators(), other.getGenerators()) &&
          JodaBeanUtils.equal(getFieldMap(), other.getFieldMap());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getUnadjustedSchedule());
    hash += hash * 31 + JodaBeanUtils.hashCode(getGenerators());
    hash += hash * 31 + JodaBeanUtils.hashCode(getFieldMap());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("GeneratedScheduleProvider{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("unadjustedSchedule").append('=').append(JodaBeanUtils.toString(getUnadjustedSchedule())).append(',').append(' ');
    buf.append("generators").append('=').append(JodaBeanUtils.toString(getGenerators())).append(',').append(' ');
    buf.append("fieldMap").append('=').append(JodaBeanUtils.toString(getFieldMap())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code GeneratedScheduleProvider}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code unadjustedSchedule} property.
     */
    private final MetaProperty<UnadjustedScheduleDefinition> unadjustedSchedule = DirectMetaProperty.ofImmutable(
        this, "unadjustedSchedule", GeneratedScheduleProvider.class, UnadjustedScheduleDefinition.class);
    /**
     * The meta-property for the {@code generators} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<ScheduleGenerator>> generators = DirectMetaProperty.ofImmutable(
        this, "generators", GeneratedScheduleProvider.class, (Class) List.class);
    /**
     * The meta-property for the {@code fieldMap} property.
     */
    private final MetaProperty<FieldMap> fieldMap = DirectMetaProperty.ofImmutable(
        this, "fieldMap", GeneratedScheduleProvider.class, FieldMap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "unadjustedSchedule",
        "generators",
        "fieldMap");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1413480002:  // unadjustedSchedule
          return unadjustedSchedule;
        case 305709056:  // generators
          return generators;
        case -929025534:  // fieldMap
          return fieldMap;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public GeneratedScheduleProvider.Builder builder() {
      return new GeneratedScheduleProvider.Builder();
    }

    @Override
    public Class<? extends GeneratedScheduleProvider> beanType() {
      return GeneratedScheduleProvider.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code unadjustedSchedule} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UnadjustedScheduleDefinition> unadjustedSchedule() {
      return unadjustedSchedule;
    }

    /**
     * The meta-property for the {@code generators} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<List<ScheduleGenerator>> generators() {
      return generators;
    }

    /**
     * The meta-property for the {@code fieldMap} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FieldMap> fieldMap() {
      return fieldMap;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1413480002:  // unadjustedSchedule
          return ((GeneratedScheduleProvider) bean).getUnadjustedSchedule();
        case 305709056:  // generators
          return ((GeneratedScheduleProvider) bean).getGenerators();
        case -929025534:  // fieldMap
          return ((GeneratedScheduleProvider) bean).getFieldMap();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code GeneratedScheduleProvider}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<GeneratedScheduleProvider> {

    private UnadjustedScheduleDefinition unadjustedSchedule;
    private List<ScheduleGenerator> generators = new ArrayList<ScheduleGenerator>();
    private FieldMap fieldMap;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(GeneratedScheduleProvider beanToCopy) {
      this.unadjustedSchedule = beanToCopy.getUnadjustedSchedule();
      this.generators = new ArrayList<ScheduleGenerator>(beanToCopy.getGenerators());
      this.fieldMap = beanToCopy.getFieldMap();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1413480002:  // unadjustedSchedule
          return unadjustedSchedule;
        case 305709056:  // generators
          return generators;
        case -929025534:  // fieldMap
          return fieldMap;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1413480002:  // unadjustedSchedule
          this.unadjustedSchedule = (UnadjustedScheduleDefinition) newValue;
          break;
        case 305709056:  // generators
          this.generators = (List<ScheduleGenerator>) newValue;
          break;
        case -929025534:  // fieldMap
          this.fieldMap = (FieldMap) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public GeneratedScheduleProvider build() {
      return new GeneratedScheduleProvider(
          unadjustedSchedule,
          generators,
          fieldMap);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code unadjustedSchedule} property in the builder.
     * @param unadjustedSchedule  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder unadjustedSchedule(UnadjustedScheduleDefinition unadjustedSchedule) {
      JodaBeanUtils.notNull(unadjustedSchedule, "unadjustedSchedule");
      this.unadjustedSchedule = unadjustedSchedule;
      return this;
    }

    /**
     * Sets the {@code generators} property in the builder.
     * @param generators  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder generators(List<ScheduleGenerator> generators) {
      JodaBeanUtils.notNull(generators, "generators");
      this.generators = generators;
      return this;
    }

    /**
     * Sets the {@code fieldMap} property in the builder.
     * @param fieldMap  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder fieldMap(FieldMap fieldMap) {
      JodaBeanUtils.notNull(fieldMap, "fieldMap");
      this.fieldMap = fieldMap;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("GeneratedScheduleProvider.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("unadjustedSchedule").append('=').append(JodaBeanUtils.toString(unadjustedSchedule)).append(',').append(' ');
      buf.append("generators").append('=').append(JodaBeanUtils.toString(generators)).append(',').append(' ');
      buf.append("fieldMap").append('=').append(JodaBeanUtils.toString(fieldMap)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
