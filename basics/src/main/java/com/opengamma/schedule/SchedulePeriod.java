/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.schedule;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.collect.range.LocalDateRange;

/**
 *
 */
@BeanDefinition
public class SchedulePeriod implements ImmutableBean {

  // TODO does this need to be a field or could it just be a value (or 2) in the field map?
  @PropertyDefinition(validate = "notNull")
  private final LocalDateRange dateRange;

  @PropertyDefinition(validate = "notNull")
  private final FieldMap defaultFields;

  @PropertyDefinition(validate = "notNull")
  private final FieldMap fields;

  @ImmutableConstructor
  private SchedulePeriod(LocalDateRange dateRange, FieldMap defaultFields, FieldMap fields) {
    this.dateRange = dateRange;
    this.defaultFields = defaultFields;
    this.fields = fields;
  }

  SchedulePeriod(LocalDateRange dateRange, FieldMap defaultFields) {
    this(dateRange, defaultFields, FieldMap.empty());
  }

  public <T> SchedulePeriod withValues(FieldKey<T> key, T value) {
    return new SchedulePeriod(dateRange, defaultFields, fields.withValues(key, value));
  }

  // TODO multiple overrides with 2, 3, ... pairs?
  public <T> SchedulePeriod withValues(FieldKey<T> key1, T value1, FieldKey<T> key2, T value2) {
    return new SchedulePeriod(dateRange, defaultFields, fields.withValues(key1, value1, key2, value2));
  }

  public <T> T get(FieldKey<T> key) {
    return find(key).get();
  }

  public <T> Optional<T> find(FieldKey<T> key) {
    Optional<T> optional = fields.get(key);

    if (optional.isPresent()) {
      return optional;
    }
    return defaultFields.get(key);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SchedulePeriod}.
   * @return the meta-bean, not null
   */
  public static SchedulePeriod.Meta meta() {
    return SchedulePeriod.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(SchedulePeriod.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static SchedulePeriod.Builder builder() {
    return new SchedulePeriod.Builder();
  }

  @Override
  public SchedulePeriod.Meta metaBean() {
    return SchedulePeriod.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the dateRange.
   * @return the value of the property, not null
   */
  public LocalDateRange getDateRange() {
    return dateRange;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the defaultFields.
   * @return the value of the property, not null
   */
  public FieldMap getDefaultFields() {
    return defaultFields;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the fields.
   * @return the value of the property, not null
   */
  public FieldMap getFields() {
    return fields;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      SchedulePeriod other = (SchedulePeriod) obj;
      return JodaBeanUtils.equal(getDateRange(), other.getDateRange()) &&
          JodaBeanUtils.equal(getDefaultFields(), other.getDefaultFields()) &&
          JodaBeanUtils.equal(getFields(), other.getFields());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getDateRange());
    hash += hash * 31 + JodaBeanUtils.hashCode(getDefaultFields());
    hash += hash * 31 + JodaBeanUtils.hashCode(getFields());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("SchedulePeriod{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("dateRange").append('=').append(JodaBeanUtils.toString(getDateRange())).append(',').append(' ');
    buf.append("defaultFields").append('=').append(JodaBeanUtils.toString(getDefaultFields())).append(',').append(' ');
    buf.append("fields").append('=').append(JodaBeanUtils.toString(getFields())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SchedulePeriod}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code dateRange} property.
     */
    private final MetaProperty<LocalDateRange> dateRange = DirectMetaProperty.ofImmutable(
        this, "dateRange", SchedulePeriod.class, LocalDateRange.class);
    /**
     * The meta-property for the {@code defaultFields} property.
     */
    private final MetaProperty<FieldMap> defaultFields = DirectMetaProperty.ofImmutable(
        this, "defaultFields", SchedulePeriod.class, FieldMap.class);
    /**
     * The meta-property for the {@code fields} property.
     */
    private final MetaProperty<FieldMap> fields = DirectMetaProperty.ofImmutable(
        this, "fields", SchedulePeriod.class, FieldMap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "dateRange",
        "defaultFields",
        "fields");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -261425617:  // dateRange
          return dateRange;
        case 591055962:  // defaultFields
          return defaultFields;
        case -1274708295:  // fields
          return fields;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public SchedulePeriod.Builder builder() {
      return new SchedulePeriod.Builder();
    }

    @Override
    public Class<? extends SchedulePeriod> beanType() {
      return SchedulePeriod.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code dateRange} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDateRange> dateRange() {
      return dateRange;
    }

    /**
     * The meta-property for the {@code defaultFields} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FieldMap> defaultFields() {
      return defaultFields;
    }

    /**
     * The meta-property for the {@code fields} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FieldMap> fields() {
      return fields;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -261425617:  // dateRange
          return ((SchedulePeriod) bean).getDateRange();
        case 591055962:  // defaultFields
          return ((SchedulePeriod) bean).getDefaultFields();
        case -1274708295:  // fields
          return ((SchedulePeriod) bean).getFields();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code SchedulePeriod}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<SchedulePeriod> {

    private LocalDateRange dateRange;
    private FieldMap defaultFields;
    private FieldMap fields;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(SchedulePeriod beanToCopy) {
      this.dateRange = beanToCopy.getDateRange();
      this.defaultFields = beanToCopy.getDefaultFields();
      this.fields = beanToCopy.getFields();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -261425617:  // dateRange
          return dateRange;
        case 591055962:  // defaultFields
          return defaultFields;
        case -1274708295:  // fields
          return fields;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -261425617:  // dateRange
          this.dateRange = (LocalDateRange) newValue;
          break;
        case 591055962:  // defaultFields
          this.defaultFields = (FieldMap) newValue;
          break;
        case -1274708295:  // fields
          this.fields = (FieldMap) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public SchedulePeriod build() {
      return new SchedulePeriod(
          dateRange,
          defaultFields,
          fields);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code dateRange} property in the builder.
     * @param dateRange  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder dateRange(LocalDateRange dateRange) {
      JodaBeanUtils.notNull(dateRange, "dateRange");
      this.dateRange = dateRange;
      return this;
    }

    /**
     * Sets the {@code defaultFields} property in the builder.
     * @param defaultFields  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder defaultFields(FieldMap defaultFields) {
      JodaBeanUtils.notNull(defaultFields, "defaultFields");
      this.defaultFields = defaultFields;
      return this;
    }

    /**
     * Sets the {@code fields} property in the builder.
     * @param fields  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder fields(FieldMap fields) {
      JodaBeanUtils.notNull(fields, "fields");
      this.fields = fields;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("SchedulePeriod.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("dateRange").append('=').append(JodaBeanUtils.toString(dateRange)).append(',').append(' ');
      buf.append("defaultFields").append('=').append(JodaBeanUtils.toString(defaultFields)).append(',').append(' ');
      buf.append("fields").append('=').append(JodaBeanUtils.toString(fields)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
