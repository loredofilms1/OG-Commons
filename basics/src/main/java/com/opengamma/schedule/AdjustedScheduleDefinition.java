/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.schedule;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Supplier;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.basics.date.BusinessDayCalendar;
import com.opengamma.basics.date.BusinessDayConvention;
import com.opengamma.collect.ArgChecker;
import com.opengamma.collect.range.LocalDateRange;

/**
 * Describes how to create a set of adjusted schedule dates from a set of unadjusted periods.
 */
@BeanDefinition
public class AdjustedScheduleDefinition implements ImmutableBean {

  // TODO should this be a link? if not should definitely be a concrete subtype BusinessDayCalendarSupplier
  @PropertyDefinition(validate = "notNull")
  private final Supplier<BusinessDayCalendar> calendar;

  @PropertyDefinition(validate = "notNull")
  private final BusinessDayConvention businessDayConvention;

  @PropertyDefinition
  private final int offsetDays; // assume only business days for now, maybe need flag to allow for calendar days

  @PropertyDefinition
  private final boolean relativeToPeriodEnd;
  // TODO roll convention (or its replacement)

  public AdjustedScheduleDefinition(Supplier<BusinessDayCalendar> calendar,
                                    BusinessDayConvention businessDayConvention,
                                    int offsetDays,
                                    boolean relativeToPeriodEnd) {
    this.calendar = ArgChecker.notNull(calendar, "calendar");
    this.businessDayConvention = ArgChecker.notNull(businessDayConvention, "businessDayConvention");
    this.offsetDays = offsetDays;
    this.relativeToPeriodEnd = relativeToPeriodEnd;
  }

  // TODO sorted set of periods? iterable?
  public List<LocalDate> calculateScheduleDates(List<LocalDateRange> periods) {
    return ScheduleDates.adjusted(calendar.get(), businessDayConvention, offsetDays, relativeToPeriodEnd);
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code AdjustedScheduleDefinition}.
   * @return the meta-bean, not null
   */
  public static AdjustedScheduleDefinition.Meta meta() {
    return AdjustedScheduleDefinition.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(AdjustedScheduleDefinition.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static AdjustedScheduleDefinition.Builder builder() {
    return new AdjustedScheduleDefinition.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected AdjustedScheduleDefinition(AdjustedScheduleDefinition.Builder builder) {
    JodaBeanUtils.notNull(builder.calendar, "calendar");
    JodaBeanUtils.notNull(builder.businessDayConvention, "businessDayConvention");
    this.calendar = builder.calendar;
    this.businessDayConvention = builder.businessDayConvention;
    this.offsetDays = builder.offsetDays;
    this.relativeToPeriodEnd = builder.relativeToPeriodEnd;
  }

  @Override
  public AdjustedScheduleDefinition.Meta metaBean() {
    return AdjustedScheduleDefinition.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the calendar.
   * @return the value of the property, not null
   */
  public Supplier<BusinessDayCalendar> getCalendar() {
    return calendar;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the businessDayConvention.
   * @return the value of the property, not null
   */
  public BusinessDayConvention getBusinessDayConvention() {
    return businessDayConvention;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the offsetDays.
   * @return the value of the property
   */
  public int getOffsetDays() {
    return offsetDays;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the relativeToPeriodEnd.
   * @return the value of the property
   */
  public boolean isRelativeToPeriodEnd() {
    return relativeToPeriodEnd;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      AdjustedScheduleDefinition other = (AdjustedScheduleDefinition) obj;
      return JodaBeanUtils.equal(getCalendar(), other.getCalendar()) &&
          JodaBeanUtils.equal(getBusinessDayConvention(), other.getBusinessDayConvention()) &&
          (getOffsetDays() == other.getOffsetDays()) &&
          (isRelativeToPeriodEnd() == other.isRelativeToPeriodEnd());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getCalendar());
    hash += hash * 31 + JodaBeanUtils.hashCode(getBusinessDayConvention());
    hash += hash * 31 + JodaBeanUtils.hashCode(getOffsetDays());
    hash += hash * 31 + JodaBeanUtils.hashCode(isRelativeToPeriodEnd());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("AdjustedScheduleDefinition{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("calendar").append('=').append(JodaBeanUtils.toString(getCalendar())).append(',').append(' ');
    buf.append("businessDayConvention").append('=').append(JodaBeanUtils.toString(getBusinessDayConvention())).append(',').append(' ');
    buf.append("offsetDays").append('=').append(JodaBeanUtils.toString(getOffsetDays())).append(',').append(' ');
    buf.append("relativeToPeriodEnd").append('=').append(JodaBeanUtils.toString(isRelativeToPeriodEnd())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code AdjustedScheduleDefinition}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code calendar} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Supplier<BusinessDayCalendar>> calendar = DirectMetaProperty.ofImmutable(
        this, "calendar", AdjustedScheduleDefinition.class, (Class) Supplier.class);
    /**
     * The meta-property for the {@code businessDayConvention} property.
     */
    private final MetaProperty<BusinessDayConvention> businessDayConvention = DirectMetaProperty.ofImmutable(
        this, "businessDayConvention", AdjustedScheduleDefinition.class, BusinessDayConvention.class);
    /**
     * The meta-property for the {@code offsetDays} property.
     */
    private final MetaProperty<Integer> offsetDays = DirectMetaProperty.ofImmutable(
        this, "offsetDays", AdjustedScheduleDefinition.class, Integer.TYPE);
    /**
     * The meta-property for the {@code relativeToPeriodEnd} property.
     */
    private final MetaProperty<Boolean> relativeToPeriodEnd = DirectMetaProperty.ofImmutable(
        this, "relativeToPeriodEnd", AdjustedScheduleDefinition.class, Boolean.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "calendar",
        "businessDayConvention",
        "offsetDays",
        "relativeToPeriodEnd");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -178324674:  // calendar
          return calendar;
        case -1002835891:  // businessDayConvention
          return businessDayConvention;
        case -652392566:  // offsetDays
          return offsetDays;
        case 1482004659:  // relativeToPeriodEnd
          return relativeToPeriodEnd;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public AdjustedScheduleDefinition.Builder builder() {
      return new AdjustedScheduleDefinition.Builder();
    }

    @Override
    public Class<? extends AdjustedScheduleDefinition> beanType() {
      return AdjustedScheduleDefinition.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code calendar} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Supplier<BusinessDayCalendar>> calendar() {
      return calendar;
    }

    /**
     * The meta-property for the {@code businessDayConvention} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<BusinessDayConvention> businessDayConvention() {
      return businessDayConvention;
    }

    /**
     * The meta-property for the {@code offsetDays} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> offsetDays() {
      return offsetDays;
    }

    /**
     * The meta-property for the {@code relativeToPeriodEnd} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Boolean> relativeToPeriodEnd() {
      return relativeToPeriodEnd;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -178324674:  // calendar
          return ((AdjustedScheduleDefinition) bean).getCalendar();
        case -1002835891:  // businessDayConvention
          return ((AdjustedScheduleDefinition) bean).getBusinessDayConvention();
        case -652392566:  // offsetDays
          return ((AdjustedScheduleDefinition) bean).getOffsetDays();
        case 1482004659:  // relativeToPeriodEnd
          return ((AdjustedScheduleDefinition) bean).isRelativeToPeriodEnd();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code AdjustedScheduleDefinition}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<AdjustedScheduleDefinition> {

    private Supplier<BusinessDayCalendar> calendar;
    private BusinessDayConvention businessDayConvention;
    private int offsetDays;
    private boolean relativeToPeriodEnd;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(AdjustedScheduleDefinition beanToCopy) {
      this.calendar = beanToCopy.getCalendar();
      this.businessDayConvention = beanToCopy.getBusinessDayConvention();
      this.offsetDays = beanToCopy.getOffsetDays();
      this.relativeToPeriodEnd = beanToCopy.isRelativeToPeriodEnd();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -178324674:  // calendar
          return calendar;
        case -1002835891:  // businessDayConvention
          return businessDayConvention;
        case -652392566:  // offsetDays
          return offsetDays;
        case 1482004659:  // relativeToPeriodEnd
          return relativeToPeriodEnd;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -178324674:  // calendar
          this.calendar = (Supplier<BusinessDayCalendar>) newValue;
          break;
        case -1002835891:  // businessDayConvention
          this.businessDayConvention = (BusinessDayConvention) newValue;
          break;
        case -652392566:  // offsetDays
          this.offsetDays = (Integer) newValue;
          break;
        case 1482004659:  // relativeToPeriodEnd
          this.relativeToPeriodEnd = (Boolean) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public AdjustedScheduleDefinition build() {
      return new AdjustedScheduleDefinition(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code calendar} property in the builder.
     * @param calendar  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder calendar(Supplier<BusinessDayCalendar> calendar) {
      JodaBeanUtils.notNull(calendar, "calendar");
      this.calendar = calendar;
      return this;
    }

    /**
     * Sets the {@code businessDayConvention} property in the builder.
     * @param businessDayConvention  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder businessDayConvention(BusinessDayConvention businessDayConvention) {
      JodaBeanUtils.notNull(businessDayConvention, "businessDayConvention");
      this.businessDayConvention = businessDayConvention;
      return this;
    }

    /**
     * Sets the {@code offsetDays} property in the builder.
     * @param offsetDays  the new value
     * @return this, for chaining, not null
     */
    public Builder offsetDays(int offsetDays) {
      this.offsetDays = offsetDays;
      return this;
    }

    /**
     * Sets the {@code relativeToPeriodEnd} property in the builder.
     * @param relativeToPeriodEnd  the new value
     * @return this, for chaining, not null
     */
    public Builder relativeToPeriodEnd(boolean relativeToPeriodEnd) {
      this.relativeToPeriodEnd = relativeToPeriodEnd;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("AdjustedScheduleDefinition.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("calendar").append('=').append(JodaBeanUtils.toString(calendar)).append(',').append(' ');
      buf.append("businessDayConvention").append('=').append(JodaBeanUtils.toString(businessDayConvention)).append(',').append(' ');
      buf.append("offsetDays").append('=').append(JodaBeanUtils.toString(offsetDays)).append(',').append(' ');
      buf.append("relativeToPeriodEnd").append('=').append(JodaBeanUtils.toString(relativeToPeriodEnd)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
