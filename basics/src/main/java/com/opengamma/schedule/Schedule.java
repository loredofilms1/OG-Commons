/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.schedule;

import static com.opengamma.collect.Guavate.toImmutableList;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.collect.ArgChecker;
import com.opengamma.collect.Guavate;
import com.opengamma.collect.range.LocalDateRange;

/**
 * TODO make the builder private to stop confusion with a separate ScheduleBuilder (if that happens)
 */
@BeanDefinition
public class Schedule implements Iterable<SchedulePeriod>, ImmutableBean {

  @PropertyDefinition(validate = "notNull")
  private final LocalDate startDate;

  @PropertyDefinition(validate = "notNull")
  private final List<SchedulePeriod> periods;

  @ImmutableConstructor
  Schedule(LocalDate startDate, List<SchedulePeriod> periods) {
    this.startDate = ArgChecker.notNull(startDate, "startDate");
    this.periods = ArgChecker.notNull(periods, "rows");
  }

  /**
   * Creates a new schedule for a list of periods.
   *
   * @param periods
   * @param startDate
   * @return  a schedule for the periods
   */
  public static Schedule of(LocalDate startDate, List<LocalDateRange> periods) {
    ArgChecker.notEmpty(periods, "periods");
    List<SchedulePeriod> rows = periods.stream()
                                       .sorted(Comparator.comparing(LocalDateRange::getStart))
                                       .map(SchedulePeriod::new)
                                       .collect(toImmutableList());
    return new Schedule(startDate, rows);
  }

  public SchedulePeriod period(int periodNum) {
    return periods.get(periodNum);
  }

  public int periodCount() {
    return periods.size();
  }

  public <T> Schedule withColumn(ScheduleColumn<T> column) {
    if (column.size() != periods.size()) {
      throw new IllegalArgumentException("Wrong number of rows in column " + column.size() + ", expected " + periods.size());
    }
    ImmutableList<SchedulePeriod> updatedRows =
        zip(periods, column.getValues(), (row, value) -> row.withValues(column.getKey(), value)).collect(toImmutableList());
    return new Schedule(startDate, updatedRows);
  }

  // TODO do I need this? impl naively by chaining withColumn()?
  /*public Schedule withColumns(ScheduleColumn... columns) {

  }*/

  public Schedule map(Function<SchedulePeriod, SchedulePeriod> function) {
    return new Schedule(startDate, periods.stream().map(function::apply).collect(Collectors.toList()));
  }

  @Override
  public Iterator<SchedulePeriod> iterator() {
    return periods.iterator();
  }

  // TODO this is probably generally useful, move somewhere?
  private static <T, U, R> Stream<R> zip(Collection<T> c1, Collection<U> c2, BiFunction<T, U, R> fn) {
    return Guavate.stream(() -> new ZipIterator<>(c1, c2, fn));
  }

  private static final class ZipIterator<T, U, R> implements Iterator<R> {

    private final Iterator<T> i1;
    private final Iterator<U> i2;
    private final BiFunction<T, U, R> fn;

    public ZipIterator(Collection<T> c1, Collection<U> c2, BiFunction<T, U, R> fn) {
      ArgChecker.notNull(c1, "c1");
      ArgChecker.notNull(c2, "c2");
      if (c1.size() != c2.size()) {
        throw new IllegalArgumentException("Collections must be the same size");
      }
      this.fn = ArgChecker.notNull(fn, "fn");
      i1 = c1.iterator();
      i2 = c2.iterator();
    }

    @Override
    public boolean hasNext() {
      return i1.hasNext();
    }

    @Override
    public R next() {
      return fn.apply(i1.next(), i2.next());
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code Schedule}.
   * @return the meta-bean, not null
   */
  public static Schedule.Meta meta() {
    return Schedule.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(Schedule.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static Schedule.Builder builder() {
    return new Schedule.Builder();
  }

  @Override
  public Schedule.Meta metaBean() {
    return Schedule.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the startDate.
   * @return the value of the property, not null
   */
  public LocalDate getStartDate() {
    return startDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the rows.
   * @return the value of the property, not null
   */
  public List<SchedulePeriod> getPeriods() {
    return periods;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      Schedule other = (Schedule) obj;
      return JodaBeanUtils.equal(getStartDate(), other.getStartDate()) &&
          JodaBeanUtils.equal(getPeriods(), other.getPeriods());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getStartDate());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPeriods());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("Schedule{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("startDate").append('=').append(JodaBeanUtils.toString(getStartDate())).append(',').append(' ');
    buf.append("rows").append('=').append(JodaBeanUtils.toString(getPeriods())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Schedule}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code startDate} property.
     */
    private final MetaProperty<LocalDate> startDate = DirectMetaProperty.ofImmutable(
        this, "startDate", Schedule.class, LocalDate.class);
    /**
     * The meta-property for the {@code rows} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<SchedulePeriod>> rows = DirectMetaProperty.ofImmutable(
        this, "rows", Schedule.class, (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "startDate",
        "rows");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2129778896:  // startDate
          return startDate;
        case 3506649:  // rows
          return rows;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public Schedule.Builder builder() {
      return new Schedule.Builder();
    }

    @Override
    public Class<? extends Schedule> beanType() {
      return Schedule.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code startDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> startDate() {
      return startDate;
    }

    /**
     * The meta-property for the {@code rows} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<List<SchedulePeriod>> rows() {
      return rows;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -2129778896:  // startDate
          return ((Schedule) bean).getStartDate();
        case 3506649:  // rows
          return ((Schedule) bean).getPeriods();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code Schedule}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<Schedule> {

    private LocalDate startDate;
    private List<SchedulePeriod> rows = new ArrayList<SchedulePeriod>();

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(Schedule beanToCopy) {
      this.startDate = beanToCopy.getStartDate();
      this.rows = new ArrayList<SchedulePeriod>(beanToCopy.getPeriods());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2129778896:  // startDate
          return startDate;
        case 3506649:  // rows
          return rows;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -2129778896:  // startDate
          this.startDate = (LocalDate) newValue;
          break;
        case 3506649:  // rows
          this.rows = (List<SchedulePeriod>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public Schedule build() {
      return new Schedule(
          startDate,
          rows);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code startDate} property in the builder.
     * @param startDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder startDate(LocalDate startDate) {
      JodaBeanUtils.notNull(startDate, "startDate");
      this.startDate = startDate;
      return this;
    }

    /**
     * Sets the {@code rows} property in the builder.
     * @param rows  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder rows(List<SchedulePeriod> rows) {
      JodaBeanUtils.notNull(rows, "rows");
      this.rows = rows;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("Schedule.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("startDate").append('=').append(JodaBeanUtils.toString(startDate)).append(',').append(' ');
      buf.append("rows").append('=').append(JodaBeanUtils.toString(rows)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

