/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.schedule;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.collect.ArgChecker;

/**
 * A column in a schedule representing a single piece of data over a range of dates.
 *
 * @param <T>  the type of the data in the column
 */
@BeanDefinition
public class ScheduleColumn<T> implements ImmutableBean {

  @PropertyDefinition(validate = "notNull")
  private final FieldKey<T> key;

  @PropertyDefinition(validate = "notNull")
  private final List<T> values;

  @ImmutableConstructor
  public ScheduleColumn(FieldKey<T> key, List<T> values) {
    this.key = ArgChecker.notNull(key, "key");
    this.values = ImmutableList.copyOf(ArgChecker.notNull(values, "values"));
  }

  public int size() {
    return values.size();
  }
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ScheduleColumn}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static ScheduleColumn.Meta meta() {
    return ScheduleColumn.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code ScheduleColumn}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R> ScheduleColumn.Meta<R> metaScheduleColumn(Class<R> cls) {
    return ScheduleColumn.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ScheduleColumn.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @param <T>  the type
   * @return the builder, not null
   */
  public static <T> ScheduleColumn.Builder<T> builder() {
    return new ScheduleColumn.Builder<T>();
  }

  @SuppressWarnings("unchecked")
  @Override
  public ScheduleColumn.Meta<T> metaBean() {
    return ScheduleColumn.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the key.
   * @return the value of the property, not null
   */
  public FieldKey<T> getKey() {
    return key;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the values.
   * @return the value of the property, not null
   */
  public List<T> getValues() {
    return values;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder<T> toBuilder() {
    return new Builder<T>(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ScheduleColumn<?> other = (ScheduleColumn<?>) obj;
      return JodaBeanUtils.equal(getKey(), other.getKey()) &&
          JodaBeanUtils.equal(getValues(), other.getValues());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getKey());
    hash += hash * 31 + JodaBeanUtils.hashCode(getValues());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ScheduleColumn{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("key").append('=').append(JodaBeanUtils.toString(getKey())).append(',').append(' ');
    buf.append("values").append('=').append(JodaBeanUtils.toString(getValues())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ScheduleColumn}.
   * @param <T>  the type
   */
  public static class Meta<T> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code key} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<FieldKey<T>> key = DirectMetaProperty.ofImmutable(
        this, "key", ScheduleColumn.class, (Class) FieldKey.class);
    /**
     * The meta-property for the {@code values} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<T>> values = DirectMetaProperty.ofImmutable(
        this, "values", ScheduleColumn.class, (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "key",
        "values");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 106079:  // key
          return key;
        case -823812830:  // values
          return values;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ScheduleColumn.Builder<T> builder() {
      return new ScheduleColumn.Builder<T>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends ScheduleColumn<T>> beanType() {
      return (Class) ScheduleColumn.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code key} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FieldKey<T>> key() {
      return key;
    }

    /**
     * The meta-property for the {@code values} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<List<T>> values() {
      return values;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 106079:  // key
          return ((ScheduleColumn<?>) bean).getKey();
        case -823812830:  // values
          return ((ScheduleColumn<?>) bean).getValues();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ScheduleColumn}.
   * @param <T>  the type
   */
  public static class Builder<T> extends DirectFieldsBeanBuilder<ScheduleColumn<T>> {

    private FieldKey<T> key;
    private List<T> values = new ArrayList<T>();

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(ScheduleColumn<T> beanToCopy) {
      this.key = beanToCopy.getKey();
      this.values = new ArrayList<T>(beanToCopy.getValues());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 106079:  // key
          return key;
        case -823812830:  // values
          return values;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<T> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 106079:  // key
          this.key = (FieldKey<T>) newValue;
          break;
        case -823812830:  // values
          this.values = (List<T>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<T> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<T> setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder<T> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ScheduleColumn<T> build() {
      return new ScheduleColumn<T>(
          key,
          values);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code key} property in the builder.
     * @param key  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T> key(FieldKey<T> key) {
      JodaBeanUtils.notNull(key, "key");
      this.key = key;
      return this;
    }

    /**
     * Sets the {@code values} property in the builder.
     * @param values  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder<T> values(List<T> values) {
      JodaBeanUtils.notNull(values, "values");
      this.values = values;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ScheduleColumn.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("key").append('=').append(JodaBeanUtils.toString(key)).append(',').append(' ');
      buf.append("values").append('=').append(JodaBeanUtils.toString(values)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
